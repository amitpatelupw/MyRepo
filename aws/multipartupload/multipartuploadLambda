package com.amazonaws.lambda.demo;

import java.util.ArrayList;
import java.util.List;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.CompleteMultipartUploadRequest;
import com.amazonaws.services.s3.model.CompleteMultipartUploadResult;
import com.amazonaws.services.s3.model.CopyPartRequest;
import com.amazonaws.services.s3.model.CopyPartResult;
import com.amazonaws.services.s3.model.GetObjectMetadataRequest;
import com.amazonaws.services.s3.model.InitiateMultipartUploadRequest;
import com.amazonaws.services.s3.model.InitiateMultipartUploadResult;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PartETag;

public class LambdaFunctionHandler implements RequestHandler<Object, String> {

	@Override
	public String handleRequest(Object input, Context context) {
		String sourceBucketName = input["bucketname"];
		String targetBucketName = "multitarget";
		String sourceObjectKey = input["bucketkey"];
		String targetObjectKey = "abcd.txt";
		AmazonS3Client s3Client = new AmazonS3Client();

		// List to store copy part responses.

		List<CopyPartResult> copyResponses = new ArrayList<CopyPartResult>();

		InitiateMultipartUploadRequest initiateRequest = new InitiateMultipartUploadRequest(targetBucketName,
				targetObjectKey);

		InitiateMultipartUploadResult initResult = s3Client.initiateMultipartUpload(initiateRequest);

		try {
			// Get object size.
			GetObjectMetadataRequest metadataRequest = new GetObjectMetadataRequest(sourceBucketName, sourceObjectKey);

			ObjectMetadata metadataResult = s3Client.getObjectMetadata(metadataRequest);
			long objectSize = metadataResult.getContentLength(); // in bytes

			// Copy parts.
			long partSize = 20 * (long) Math.pow(2.0, 20.0); // 5 MB

			long bytePosition = 0;
			for (int i = 1; bytePosition < objectSize; i++) {
				CopyPartRequest copyRequest = new CopyPartRequest().withDestinationBucketName(targetBucketName)
						.withDestinationKey(targetObjectKey).withSourceBucketName(sourceBucketName)
						.withSourceKey(sourceObjectKey).withUploadId(initResult.getUploadId())
						.withFirstByte(bytePosition)
						.withLastByte(bytePosition + partSize - 1 >= objectSize ? objectSize - 1
								: bytePosition + partSize - 1)
						.withPartNumber(i);

				copyResponses.add(s3Client.copyPart(copyRequest));
				bytePosition += partSize;

			}
			CompleteMultipartUploadRequest completeRequest = new CompleteMultipartUploadRequest(targetBucketName,
					targetObjectKey, initResult.getUploadId(), GetETags(copyResponses));

			CompleteMultipartUploadResult completeUploadResponse = s3Client.completeMultipartUpload(completeRequest);			
		} catch (Exception e) 
		{
			System.out.println(e.getMessage());
		}
		
		return "Lambda Completed Successfully";
	}
	static List<PartETag> GetETags(List<CopyPartResult> responses)
    {
        List<PartETag> etags = new ArrayList<PartETag>();
        for (CopyPartResult response : responses)
        {
            etags.add(new PartETag(response.getPartNumber(), response.getETag()));
        }
        return etags;
    }   

}
  
