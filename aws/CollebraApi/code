package com.amazonaws.samples;
import java.beans.Encoder;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
/*
 * Copyright 2012-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
import java.util.HashMap;
import java.util.Map;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.DescribeTableRequest;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.PutItemRequest;
import com.amazonaws.services.dynamodbv2.model.PutItemResult;
import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.dynamodbv2.model.TableDescription;
import com.amazonaws.services.dynamodbv2.util.TableUtils;
import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;

/**
 * This sample demonstrates how to perform a few simple operations with the
 * Amazon DynamoDB service.
 */
public class AmazonDynamoDBSample {

    /*
     * Before running the code:
     *      Fill in your AWS access credentials in the provided credentials
     *      file template, and be sure to move the file to the default location
     *      (C:\\Users\\babuclient\\.aws\\credentials) where the sample code will load the
     *      credentials from.
     *      https://console.aws.amazon.com/iam/home?#security_credential
     *
     * WARNING:
     *      To avoid accidental leakage of your credentials, DO NOT keep
     *      the credentials file in your source directory.
     */

    static AmazonDynamoDB dynamoDB;

    /**
     * The only information needed to create a client are security credentials
     * consisting of the AWS Access Key ID and Secret Access Key. All other
     * configuration, such as the service endpoints, are performed
     * automatically. Client parameters, such as proxies, can be specified in an
     * optional ClientConfiguration object when constructing a client.
     *
     * @see com.amazonaws.auth.BasicAWSCredentials
     * @see com.amazonaws.auth.ProfilesConfigFile
     * @see com.amazonaws.ClientConfiguration
     */
    private static void init() throws Exception {
        /*
         * The ProfileCredentialsProvider will return your [default]
         * credential profile by reading from the credentials file located at
         * (C:\\Users\\babuclient\\.aws\\credentials).
         */
//        ProfileCredentialsProvider credentialsProvider = new ProfileCredentialsProvider();
//        try {
//            credentialsProvider.getCredentials();
//        } catch (Exception e) {
//            throw new AmazonClientException(
//                    "Cannot load the credentials from the credential profiles file. " +
//                    "Please make sure that your credentials file is at the correct " +
//                    "location (C:\\Users\\babuclient\\.aws\\credentials), and is in valid format.",
//                    e);
//        }
//        dynamoDB = AmazonDynamoDBClientBuilder.standard()
//            .withCredentials(credentialsProvider)
//            .withRegion("us-west-2")
//            .build();
    }

    public static void main(String[] args) throws Exception {
        init();

        InputStream inputStream;
		HttpURLConnection connection;
		String abc = "{\n" + 
				"  \\\"TableViewConfig\\\": {\n" + 
				"    \\\"displayLength\\\": -1,\n" + 
				"    \\\"displayStart\\\": 0,\n" + 
				"    \\\"Resources\\\": {\n" + 
				"      \\\"Term\\\": {\n" + 
				"        \\\"Signifier\\\": {\n" + 
				"          \\\"name\\\": \\\"termsignifier\\\"\n" + 
				"        },\n" + 
				"        \\\"Id\\\": {\n" + 
				"          \\\"name\\\": \\\"termrid\\\"\n" + 
				"        },\n" + 
				"        \\\"ConceptType\\\": [\n" + 
				"          {\n" + 
				"            \\\"Signifier\\\": {\n" + 
				"              \\\"name\\\": \\\"concepttypename\\\"\n" + 
				"            },\n" + 
				"            \\\"Id\\\": {\n" + 
				"              \\\"name\\\": \\\"concepttyperid\\\"\n" + 
				"            }\n" + 
				"          }\n" + 
				"        ],\n" + 
				"        \\\"Status\\\": {\n" + 
				"          \\\"Signifier\\\": {\n" + 
				"            \\\"name\\\": \\\"statusname\\\"\n" + 
				"          },\n" + 
				"          \\\"Id\\\": {\n" + 
				"            \\\"name\\\": \\\"statusrid\\\"\n" + 
				"          }\n" + 
				"        },\n" + 
				"        \\\"Vocabulary\\\": {\n" + 
				"          \\\"Id\\\": {\n" + 
				"            \\\"name\\\": \\\"domainrid\\\"\n" + 
				"          },\n" + 
				"          \\\"Name\\\": {\n" + 
				"            \\\"name\\\": \\\"domainname\\\"\n" + 
				"          },\n" + 
				"          \\\"Community\\\": {\n" + 
				"            \\\"Id\\\": {\n" + 
				"              \\\"name\\\": \\\"commrid\\\"\n" + 
				"            },\n" + 
				"            \\\"Name\\\": {\n" + 
				"              \\\"name\\\": \\\"communityname\\\"\n" + 
				"            }\n" + 
				"          },\n" + 
				"          \\\"VocabularyType\\\": {\n" + 
				"            \\\"Id\\\": {\n" + 
				"              \\\"name\\\": \\\"domaintyperid\\\"\n" + 
				"            },\n" + 
				"            \\\"Signifier\\\": {\n" + 
				"              \\\"name\\\": \\\"domaintypename\\\"\n" + 
				"            }\n" + 
				"          }\n" + 
				"        },\n" + 
				"        \\\"StringAttribute\\\": [\n" + 
				"          {\n" + 
				"            \\\"Id\\\": {\n" + 
				"              \\\"name\\\": \\\"Attrf4ed31a499f14b1788e646763821a485rid\\\"\n" + 
				"            },\n" + 
				"            \\\"labelId\\\": \\\"f4ed31a4-99f1-4b17-88e6-46763821a485\\\",\n" + 
				"            \\\"Value\\\": {\n" + 
				"              \\\"name\\\": \\\"Attrf4ed31a499f14b1788e646763821a485\\\"\n" + 
				"            },\n" + 
				"            \\\"LongExpression\\\": {\n" + 
				"              \\\"name\\\": \\\"Attrf4ed31a499f14b1788e646763821a485longExpr\\\",\n" + 
				"              \\\"stripHtml\\\": true\n" + 
				"            }\n" + 
				"          }\n" + 
				"        ],\n" + 
				"        \\\"SingleValueListAttribute\\\": [\n" + 
				"          {\n" + 
				"            \\\"labelId\\\": \\\"0dc4a317-37d7-426b-9327-10a990794aa1\\\",\n" + 
				"            \\\"Value\\\": {\n" + 
				"              \\\"name\\\": \\\"Attr0dc4a31737d7426b932710a990794aa1\\\"\n" + 
				"            }\n" + 
				"          }\n" + 
				"        ],\n" + 
				"        \\\"NumericAttribute\\\": [\n" + 
				"          {\n" + 
				"            \\\"labelId\\\": \\\"9dfb883f-b109-4b5d-8bdc-941725c331c8\\\",\n" + 
				"            \\\"NumericValue\\\": {\n" + 
				"              \\\"name\\\": \\\"Attr9dfb883fb1094b5d8bdc941725c331c8\\\"\n" + 
				"            }\n" + 
				"          }\n" + 
				"        ],\n" + 
				"        \\\"DateAttribute\\\": {\n" + 
				"          \\\"Date\\\": {\n" + 
				"            \\\"name\\\": \\\"Attr1ecee3428b5f463cabfffcb2dda9e903\\\"\n" + 
				"          },\n" + 
				"          \\\"labelId\\\": \\\"1ecee342-8b5f-463c-abff-fcb2dda9e903\\\"\n" + 
				"        },\n" + 
				"        \\\"Relation\\\": [\n" + 
				"          {\n" + 
				"            \\\"typeId\\\": \\\"ccdf950d-03b3-4454-a87e-2e783205fd26\\\",\n" + 
				"            \\\"type\\\": \\\"SOURCE\\\",\n" + 
				"            \\\"Target\\\": {\n" + 
				"              \\\"Signifier\\\": {\n" + 
				"                \\\"name\\\": \\\"Relccdf950d03b34454a87e2e783205fd26S\\\"\n" + 
				"              },\n" + 
				"              \\\"Id\\\": {\n" + 
				"                \\\"name\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Srid\\\"\n" + 
				"              },\n" + 
				"              \\\"ConceptType\\\": {\n" + 
				"                \\\"Signifier\\\": {\n" + 
				"                  \\\"name\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Sct\\\"\n" + 
				"                }\n" + 
				"              },\n" + 
				"              \\\"Vocabulary\\\": {\n" + 
				"                \\\"Name\\\": {\n" + 
				"                  \\\"name\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Svc\\\"\n" + 
				"                },\n" + 
				"                \\\"VocabularyType\\\": {\n" + 
				"                  \\\"Signifier\\\": {\n" + 
				"                    \\\"name\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Svt\\\"\n" + 
				"                  }\n" + 
				"                },\n" + 
				"                \\\"Community\\\": {\n" + 
				"                  \\\"Name\\\": {\n" + 
				"                    \\\"name\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Sco\\\"\n" + 
				"                  }\n" + 
				"                }\n" + 
				"              }\n" + 
				"            }\n" + 
				"          }\n" + 
				"        ],\n" + 
				"        \\\"Filter\\\": {\n" + 
				"          \\\"AND\\\": [\n" + 
				"            {\n" + 
				"              \\\"AND\\\": [\n" + 
				"                {\n" + 
				"                  \\\"Field\\\": {\n" + 
				"                    \\\"name\\\": \\\"concepttyperid\\\",\n" + 
				"                    \\\"operator\\\": \\\"EQUALS\\\",\n" + 
				"                    \\\"value\\\": \\\"8806279e-6f0a-4f86-b069-f395f2ac8f4f\\\"\n" + 
				"                  }\n" + 
				"                }\n" + 
				"              ]\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        },\n" + 
				"        \\\"Order\\\": [\n" + 
				"          {\n" + 
				"            \\\"Field\\\": {\n" + 
				"              \\\"name\\\": \\\"termsignifier\\\",\n" + 
				"              \\\"order\\\": \\\"asc\\\"\n" + 
				"            }\n" + 
				"          }\n" + 
				"        ]\n" + 
				"      }\n" + 
				"    },\n" + 
				"    \\\"Columns\\\": [\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Name\\\",\n" + 
				"                \\\"fieldName\\\": \\\"termsignifier\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Asset ID\\\",\n" + 
				"                \\\"fieldName\\\": \\\"termrid\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Type\\\",\n" + 
				"                \\\"fieldName\\\": \\\"concepttypename\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Status\\\",\n" + 
				"                \\\"fieldName\\\": \\\"statusname\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Domain\\\",\n" + 
				"                \\\"fieldName\\\": \\\"domainname\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Execution Date\\\",\n" + 
				"                \\\"fieldName\\\": \\\"Attr1ecee3428b5f463cabfffcb2dda9e903\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Profiling Technique\\\",\n" + 
				"                \\\"fieldName\\\": \\\"Attr0dc4a31737d7426b932710a990794aa1\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Profile Rule Description (No Formatting)\\\",\n" + 
				"                \\\"fieldName\\\": \\\"Attrf4ed31a499f14b1788e646763821a485longExpr\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Total # Records Profiled\\\",\n" + 
				"                \\\"fieldName\\\": \\\"Attr9dfb883fb1094b5d8bdc941725c331c8\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Column\\\": {\n" + 
				"          \\\"label\\\": \\\"Related to (Data Element) [Data Element] > Data Element\\\",\n" + 
				"          \\\"fieldName\\\": \\\"Relccdf950d03b34454a87e2e783205fd26S\\\"\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Column\\\": {\n" + 
				"          \\\"label\\\": \\\"Related to (Data Element) [Data Element] > Type\\\",\n" + 
				"          \\\"fieldName\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Sct\\\"\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Column\\\": {\n" + 
				"          \\\"label\\\": \\\"Related to (Data Element) [Data Element] > Domain\\\",\n" + 
				"          \\\"fieldName\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Svc\\\"\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Column\\\": {\n" + 
				"          \\\"label\\\": \\\"Related to (Data Element) [Data Element] > Domain Type\\\",\n" + 
				"          \\\"fieldName\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Svt\\\"\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Column\\\": {\n" + 
				"          \\\"label\\\": \\\"Related to (Data Element) [Data Element] > Community\\\",\n" + 
				"          \\\"fieldName\\\": \\\"Relccdf950d03b34454a87e2e783205fd26Sco\\\"\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Domain Type\\\",\n" + 
				"                \\\"fieldName\\\": \\\"domaintypename\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      },\n" + 
				"      {\n" + 
				"        \\\"Group\\\": {\n" + 
				"          \\\"name\\\": \\\"agroup\\\",\n" + 
				"          \\\"Columns\\\": [\n" + 
				"            {\n" + 
				"              \\\"Column\\\": {\n" + 
				"                \\\"label\\\": \\\"Community\\\",\n" + 
				"                \\\"fieldName\\\": \\\"communityname\\\"\n" + 
				"              }\n" + 
				"            }\n" + 
				"          ]\n" + 
				"        }\n" + 
				"      }\n" + 
				"    ]\n" + 
				"  }\n" + 
				"}";

		try
		{
			URL uri = new URL("https://dtcc-edm-dev.collibra.com/rest/latest/output/csv");
			connection = (HttpURLConnection) uri.openConnection();
			//connection.setRequestProperty("Content-Type", "application/xml");
			connection.setRequestMethod( "POST" );
			 connection.setDoOutput(true);			
			connection.setRequestProperty( "Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");			
			
			new Base64();
			
			String userpass = "arun" + ":" + "arun@0517";
			
			String basicAuth = "Basic " + new String(Base64.encode(userpass.getBytes()));
			connection.setRequestProperty ("Authorization", basicAuth);
			//connection.setRequestProperty ("Accept", "application/json");
			//connection.setRequestProperty( "charset", "utf-8");
			connection.setRequestProperty( "tableViewConfig",abc.replaceAll("\n", ""));
			 //connection.connect();
			 
			 inputStream = connection.getInputStream();
			 BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
		        StringBuilder results = new StringBuilder();
		        String line;
		        while ((line = reader.readLine()) != null) {
		            results.append(line);
		        }
			//inputStream = connection.getInputStream();
			
			//BufferedReader br = new BufferedReader(new InputStreamReader(
			//		(connection.getInputStream())));

			String output;
			System.out.println("Output from Server .... \n");
			while ((output = reader.readLine()) != null) {
				System.out.println(output);
			}

			connection.disconnect();
		}
		catch(IOException  ex)
		{
			ex.printStackTrace();
		}
//        try {
//            String tableName = "my-favorite-movies-table";
//
//            // Create a table with a primary hash key named 'name', which holds a string
//            CreateTableRequest createTableRequest = new CreateTableRequest().withTableName(tableName)
//                .withKeySchema(new KeySchemaElement().withAttributeName("name").withKeyType(KeyType.HASH))
//                .withAttributeDefinitions(new AttributeDefinition().withAttributeName("name").withAttributeType(ScalarAttributeType.S))
//                .withProvisionedThroughput(new ProvisionedThroughput().withReadCapacityUnits(1L).withWriteCapacityUnits(1L));
//
//            // Create table if it does not exist yet
//            TableUtils.createTableIfNotExists(dynamoDB, createTableRequest);
//            // wait for the table to move into ACTIVE state
//            TableUtils.waitUntilActive(dynamoDB, tableName);
//
//            // Describe our new table
//            DescribeTableRequest describeTableRequest = new DescribeTableRequest().withTableName(tableName);
//            TableDescription tableDescription = dynamoDB.describeTable(describeTableRequest).getTable();
//            System.out.println("Table Description: " + tableDescription);
//
//            // Add an item
//            Map<String, AttributeValue> item = newItem("Bill & Ted's Excellent Adventure", 1989, "****", "James", "Sara");
//            PutItemRequest putItemRequest = new PutItemRequest(tableName, item);
//            PutItemResult putItemResult = dynamoDB.putItem(putItemRequest);
//            System.out.println("Result: " + putItemResult);
//
//            // Add another item
//            item = newItem("Airplane", 1980, "*****", "James", "Billy Bob");
//            putItemRequest = new PutItemRequest(tableName, item);
//            putItemResult = dynamoDB.putItem(putItemRequest);
//            System.out.println("Result: " + putItemResult);
//
//            // Scan items for movies with a year attribute greater than 1985
//            HashMap<String, Condition> scanFilter = new HashMap<String, Condition>();
//            Condition condition = new Condition()
//                .withComparisonOperator(ComparisonOperator.GT.toString())
//                .withAttributeValueList(new AttributeValue().withN("1985"));
//            scanFilter.put("year", condition);
//            ScanRequest scanRequest = new ScanRequest(tableName).withScanFilter(scanFilter);
//            ScanResult scanResult = dynamoDB.scan(scanRequest);
//            System.out.println("Result: " + scanResult);
//
//        } catch (AmazonServiceException ase) {
//            System.out.println("Caught an AmazonServiceException, which means your request made it "
//                    + "to AWS, but was rejected with an error response for some reason.");
//            System.out.println("Error Message:    " + ase.getMessage());
//            System.out.println("HTTP Status Code: " + ase.getStatusCode());
//            System.out.println("AWS Error Code:   " + ase.getErrorCode());
//            System.out.println("Error Type:       " + ase.getErrorType());
//            System.out.println("Request ID:       " + ase.getRequestId());
//        } catch (AmazonClientException ace) {
//            System.out.println("Caught an AmazonClientException, which means the client encountered "
//                    + "a serious internal problem while trying to communicate with AWS, "
//                    + "such as not being able to access the network.");
//            System.out.println("Error Message: " + ace.getMessage());
//        }
    }

    private static Map<String, AttributeValue> newItem(String name, int year, String rating, String... fans) {
        Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
        item.put("name", new AttributeValue(name));
        item.put("year", new AttributeValue().withN(Integer.toString(year)));
        item.put("rating", new AttributeValue(rating));
        item.put("fans", new AttributeValue().withSS(fans));

        return item;
    }

}
